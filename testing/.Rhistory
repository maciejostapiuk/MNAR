### testing
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 100
results <- matrix(0, n_reps, 3)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(samp_data))
## standard calib
g_standard <- mnar(pop_dat = pop_data, samp_data = sample, totals = totals,Xs= xs, Y=y,ds=d,Probs = pr, method = NULL)
## generalized calibration
g_generl <-mnar(pop_dat = pop_data, samp_data = sample, totals = totals,Xs= xs, Zs=zs, Y=y,ds=d,Probs = pr, method = "generalized calibration")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_standard)
results[r,3] <- weighted.mean(sample$y, g_generl)
}
library(sampling)
mnar <-  function(pop_dat, samp_data, totals, Xs, Zs = NULL, Y, ds, Probs, method=NULL) {
if (is.null(Zs)) {
weights<- calib(Xs,
ds,
total = totals,
method = "raking")
return(weigths)
}
else if (!is.null(Zs) & method == "generalized calibration"){
weights <- gencalib(Xs,
Zs,
ds,
total = totals,
method = "raking")
return(weigths)
}
}
### testing
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 100
results <- matrix(0, n_reps, 3)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## standard calib
g_standard <- mnar(pop_dat = pop_data, samp_data = sample, totals = totals,Xs= xs, Y=y,ds=d,Probs = pr, method = NULL)
## generalized calibration
g_generl <-mnar(pop_dat = pop_data, samp_data = sample, totals = totals,Xs= xs, Zs=zs, Y=y,ds=d,Probs = pr, method = "generalized calibration")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_standard)
results[r,3] <- weighted.mean(sample$y, g_generl)
}
library(sampling)
mnar <-  function(pop_dat, samp_data, totals, Xs, Zs = NULL, Y, ds, Probs, method=NULL) {
if (is.null(Zs)) {
weights<- calib(Xs,
ds,
total = totals,
method = "raking")
return(weights)
}
else if (!is.null(Zs) & method == "generalized calibration"){
weights <- gencalib(Xs,
Zs,
ds,
total = totals,
method = "raking")
return(weights)
}
}
### testing
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 100
results <- matrix(0, n_reps, 3)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## standard calib
g_standard <- mnar(pop_dat = pop_data, samp_data = sample, totals = totals,Xs= xs, Y=y,ds=d,Probs = pr, method = NULL)
## generalized calibration
g_generl <-mnar(pop_dat = pop_data, samp_data = sample, totals = totals,Xs= xs, Zs=zs, Y=y,ds=d,Probs = pr, method = "generalized calibration")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_standard)
results[r,3] <- weighted.mean(sample$y, g_generl)
}
boxplot(results - mean(pop_data$y))
abline(h = 0, col = "red")
y_true <- pop_data$y
apply(results, 2, FUN = function(x) c(bias = mean(x) - mean(y_true),
sd = sd(x),
rmse = sqrt( (mean(x) - mean(y_true))^2 + var(x))))
library(sampling)
mnar <-  function(pop_dat, samp_data, totals, Xs, Zs = NULL, Y, ds, Probs, method=NULL) {
if (is.null(Zs)) {
weights<- calib(Xs,
ds,
total = totals,
method = "raking")
return(weights)
}
else if (!is.null(Zs) & method == "generalized calibration"){
weights <- gencalib(Xs,
Zs,
ds,
total = totals,
method = "raking")
return(weights)
}
}
### testing
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 3)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## standard calib
g_standard <- mnar(pop_dat = pop_data, samp_data = sample, totals = totals,Xs= xs, Y=y,ds=d,Probs = pr, method = NULL)
## generalized calibration
g_generl <-mnar(pop_dat = pop_data, samp_data = sample, totals = totals,Xs= xs, Zs=zs, Y=y,ds=d,Probs = pr, method = "generalized calibration")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_standard)
results[r,3] <- weighted.mean(sample$y, g_generl)
}
boxplot(results - mean(pop_data$y))
abline(h = 0, col = "red")
y_true <- pop_data$y
apply(results, 2, FUN = function(x) c(bias = mean(x) - mean(y_true),
sd = sd(x),
rmse = sqrt( (mean(x) - mean(y_true))^2 + var(x))))
library(sampling)
source("methods/gencalib.R")
library(here)
library(here)
library(sampling)
source(here("methods", "gencalib.R"))
here()
here("methods")
here("mnar")
here("../mnar")
library(sampling)
source(here("../mnar/methods", "gencalib.R"))
library(sampling)
source(here("../mnar/methods", "gencalib.R"))
setwd("mnar")
setwd(normalizePath("../mnar"))
setwd("mnar")
getwd()
library(rprojroot)
root <- find_root(is_rstudio_project)  # Adjust this criterion if needed
library(rprojroot)
root <- find_root(is_rstudio_project)  # Adjust this criterion if needed
library(rprojroot)
root <- find_root(has_file("README.md"))  # Adjust this criterion if needed
library(rprojroot)
root <- find_root(has_dir("mnar"))  # Adjust this criterion if needed
dirname(sys.frame(1)$ofile)
dirname(sys.frame()$ofile)
dirname(rprojroot::thisfile())
dirname(whereami::thisfile())
library(whereami)
install.packages("whereami")
dirname(whereami::thisfile())
setwd(dirname(rprojroot::thisfile()))
setwd(dirname(sys.frame(1)$ofile))
pwd
$pwd
whereami()
library(whereami)
whereami()
whereami(path_expand = TRUE)
thisfile()
thisfile_r()
library(rstudioapi)
getActiveDocumentContext()
getActiveDocumentContext()
getActiveDocumentContext()$path
library(sampling)
setwd(getActiveDocumentContext()$path)
setwd(getActiveDocumentContext()$path)
getActiveDocumentContext()$path
dirname(getActiveDocumentContext()$path)
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source(here("../methods", "gencalib.R"))
source("../methods/gencalib.R"))
source("../methods/gencalib.R")
rm(list = ls())
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../methods/gencalib.R")
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-gencal(totals = totals,nonresponse = xs, instrumental_variables=zs, target_variables=y,initial_weights=d)
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../main_func/main_function.R")
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-mnar(totals = totals,nonresponse = xs, instrumental_variables=zs, target_variables=y,initial_weights=d, method = "gencalib")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../main_func/main_function.R")
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-mnar(totals = totals,nonresponse = xs, instrumental_variables=zs, target_variables=y,initial_weights=d, method = "gencalib")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
rm(list = ls())
setwd(dirname(getActiveDocumentContext()$path))
source("../methods/gencalib.R")
mnar <- function(totals, nonresponse, instrumental_variables = NULL, target_variables, initial_weights, method)
if (method == "gencalib") {
weights <- gencal(totals, nonresponse, instrumental_variables = NULL, target_variables, initial_weights)
return(weights)
}
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-mnar(totals = totals,nonresponse = xs, instrumental_variables=zs, target_variables=y,initial_weights=d, method = "gencalib")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
ls()
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../methods/gencalib.R")
mnar <- function(totals, nonresponse, instrumental_variables = NULL, target_variables, initial_weights, method) {
if (method == "gencalib") {
weights <- gencal(totals, nonresponse, instrumental_variables, target_variables, initial_weights)
return(weights)
} else {
stop("Unknown method specified")
}
}
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-mnar(totals = totals,nonresponse = xs, instrumental_variables=zs, target_variables=y,initial_weights=d, method = "gencalib")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
boxplot(results - mean(pop_data$y))
abline(h = 0, col = "red")
rm(list = ls())
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../main_func/main_function.R")
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../main_func/main_function.R")
source("../methods/gencalib.R")
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../methods/gencalib.R")
source("../main_func/main_function.R")
rm(list = ls())
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
#source("../methods/gencalib.R")
source("../main_func/main_function.R")
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../main_func/main_function.R")
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-mnar(totals = totals,nonresponse = xs, instrumental_variables=zs, target_variables=y,initial_weights=d, method = "gencalib")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
boxplot(results - mean(pop_data$y))
abline(h = 0, col = "red")
y_true <- pop_data$y
apply(results, 2, FUN = function(x) c(bias = mean(x) - mean(y_true),
sd = sd(x),
rmse = sqrt( (mean(x) - mean(y_true))^2 + var(x))))
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../main_func/main_function.R")
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-mnar(totals = totals,calib_var = xs, instr_var=zs, target_var=y,initial_weights=d, method = "gencalib")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
rm(list = ls())
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../main_func/main_function.R")
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-mnar(totals = totals,calib_var = xs, instr_var=zs, target_var=y,initial_weights=d, method = "gencalib")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
library(sampling)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("../main_func/main_function.R")
set.seed(123)
n <- 10000
x1 <- rlnorm(n, 0, 1)
x2 <- rexp(n, 1)
y <- 1 + x1 + x2 + rnorm(n)
pr <- plogis(1 + 0.5*x1 - 0.5*y)
pop_data <- data.frame(x1, x2, y, pr)
totals <- c(N = n, colSums(pop_data[, c("x1", "x2")]))
n_reps <- 10000
results <- matrix(0, n_reps, 2)
for (r in 1:n_reps) {
flag <- rbinom(n, 1, pop_data$pr)
sample <- pop_data[flag == 1, ]
xs = model.matrix(~x1 + x2, sample)
zs = model.matrix(~x1 + y, sample)
d = rep(1, NROW(sample))
## generalized calibration
g_generl <-mnar(totals = totals,calib_var = xs, instr_var=zs, target_var=y,initial_weights=d, method = "gencalib")
## naive
results[r,1] <- mean(sample$y)
results[r,2] <- weighted.mean(sample$y, g_generl)
}
boxplot(results - mean(pop_data$y))
abline(h = 0, col = "red")
y_true <- pop_data$y
apply(results, 2, FUN = function(x) c(bias = mean(x) - mean(y_true),
sd = sd(x),
rmse = sqrt( (mean(x) - mean(y_true))^2 + var(x))))
